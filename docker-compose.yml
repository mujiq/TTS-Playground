version: '3.8'

services:
  # PostgreSQL database with pgvector extension
  postgres:
    image: pgvector/pgvector:pg16
    container_name: postgres
    restart: always
    environment:
      - POSTGRES_USER=cursor_admin
      - POSTGRES_PASSWORD=xh7Gt5p9JQk2Vb8Z3eR2yF4W
      - POSTGRES_DB=cursor_tts_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cursor_admin -d cursor_tts_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Nginx load balancer
  loadbalancer:
    image: nginx:stable-alpine
    container_name: loadbalancer
    ports:
      - "0.0.0.0:80:80"  # Expose to all network interfaces
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./audio-output:/usr/share/nginx/html/audio-output
    depends_on:
      - frontend
      - ray-head
    restart: always

  # Frontend React app
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    restart: always
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=production
      - REACT_APP_API_URL=/api

  # Ray head node (serves API + head node)
  ray-head:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ray-head
    restart: always
    ports:
      - "8000:8000"  # API
      - "8265:8265"  # Ray dashboard
    environment:
      - POSTGRES_URL=postgresql://cursor_admin:xh7Gt5p9JQk2Vb8Z3eR2yF4W@postgres:5432/cursor_tts_db
      - OUTPUT_DIR=/app/audio-output
      - MODEL_DIR=/app/models/tts
      - RAY_HEAD_PORT=10001
    volumes:
      - ./audio-output:/app/audio-output
      - ./models:/app/models
      - ./scripts:/app/scripts
    depends_on:
      postgres:
        condition: service_healthy
    command: >
      bash -c "bash /app/scripts/start_ray_api.sh"

  # Ray worker node 1
  ray-worker-1:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ray-worker-1
    restart: always
    environment:
      - RAY_HEAD_HOST=ray-head
      - RAY_HEAD_PORT=10001
      - MODEL_DIR=/app/models/tts
    volumes:
      - ./models:/app/models
    depends_on:
      - ray-head
    command: >
      bash -c "ray start --address=ray-head:10001 --num-gpus=1"

  # Ray worker node 2
  ray-worker-2:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ray-worker-2
    restart: always
    environment:
      - RAY_HEAD_HOST=ray-head
      - RAY_HEAD_PORT=10001
      - MODEL_DIR=/app/models/tts
    volumes:
      - ./models:/app/models
    depends_on:
      - ray-head
    command: >
      bash -c "ray start --address=ray-head:10001 --num-gpus=1"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "0.0.0.0:9090:9090"  # Expose to all network interfaces
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "0.0.0.0:3000:3000"  # Expose to all network interfaces
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus

volumes:
  grafana-data:
  postgres-data: 